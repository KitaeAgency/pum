{# View Header #}
{% macro section_title(title, description, small='', breadcrumb=[]) %}
    <h1 class="pum-view_title pum-scheme-text_colored">
        {{ title|pum_ucfirst }}
        {% if small is defined and small != '' %}
            <small>{{ small|raw }}</small>
        {% endif %}
    </h1>
    {% if breadcrumb|length > 0 %}
        {% set tmp_small_class = ' wbcrmb' %}
        {% set breadcrumb_limit = breadcrumb|length - 1 %}
    {% else %}
        {% set tmp_small_class = '' %}
    {% endif %}
    {% if description is defined and description != '' %}
        <small class="text-muted{{ tmp_small_class }}">{{ description|raw }}</small>
    {% elseif breadcrumb_limit is defined %}
        <small class="text-muted{{ tmp_small_class }}">{{ breadcrumb[breadcrumb_limit].text|raw }}</small>
    {% endif %}

    {% if breadcrumb|length > 0 %}
        <ul class="breadcrumb">
            {% for key, link in breadcrumb %}
                {% if key == breadcrumb_limit %}
                    <li class="active">{{ link.text|raw }}</li>
                {% else %}
                    <li><a href="{{ link.href }}">{{ link.text|raw }}</a></li>
                {% endif %}
            {% endfor %}
        </ul>
    {% endif %}
{% endmacro %}

{# Collapsed List for long list items in Table View #}
{% macro collapsed_list(id, items, method='name', title = null, limit = 5, format = false) %}
    {% if title is empty %}
        {% set title = ['macro.collapsedlist.item'|trans({}, 'pum'), 'macro.collapsedlist.items'|trans({}, 'pum')] %}
    {% endif %}
    {% if items|length >= limit %}
        <div id="{{ id }}" class="pum-simple_expand">
            <a class="accordion-toggle" data-toggle="collapse" data-parent="#{{ id }}" href="#expand_{{ id }}">
                {{ items|length }}
                {% if items|length < 2 %}
                    {{ title.0 }}
                {% else %}
                    {{ title.1 }}
                {% endif %}
            </a>
            <div class="accordion-body collapse" id="expand_{{ id }}">
                <ul class="list-unstyled list-spaced">
                    {% if format == 'code' %}
                        {% for item in items %}
                            <li><code>{{ attribute(item, method) }}</code></li>
                        {% endfor %}
                    {% elseif format == 'strong' %}
                        {% for item in items %}
                            <li><strong>{{ attribute(item, method) }}</strong></li>
                        {% endfor %}
                    {% else %}
                        {% for item in items %}
                            <li>{{ attribute(item, method) }}</li>
                        {% endfor %}
                    {% endif %}
                </ul>
            </div>
        </div>
    {% else %}
        <ul class="list-unstyled list-spaced">
            {% if format == 'code' %}
                {% for item in items %}
                    <li><code>{{ attribute(item, method) }}</code></li>
                {% endfor %}
            {% elseif format == 'strong' %}
                {% for item in items %}
                    <li><strong>{{ attribute(item, method) }}</strong></li>
                {% endfor %}
            {% else %}
                {% for item in items %}
                    <li>{{ attribute(item, method) }}</li>
                {% endfor %}
            {% endif %}
        </ul>
    {% endif %}
{% endmacro %}

{# Pagination #}
{% macro pager(pager, distance = 2) %}
    {% set mid  = pager.currentPage %}
    {% set dots = 'none' %}

    {% if pager.currentPage - distance <= 0 %}
        {% set mid = distance + 1 %}
    {% elseif pager.currentPage + distance >= pager.nbPages %}
        {% set mid = pager.nbPages - distance %}
    {% endif %}

    {% if mid - distance > 1 %}
        {% set dots = 'left' %}
    {% endif %}
    {% if mid + distance < pager.nbPages %}
        {% if dots == 'left' %}
            {% set dots = 'both' %}
        {% else %}
            {% set dots = 'right' %}
        {% endif %}
    {% endif %}

    {% set min = mid - distance %}
    {% set max = mid + distance %}

    <div class="text-center">
        <ul class="pagination">
            {% if dots != 'none' %}
                <li class="pagination_goto"><span>Page <input data-href="?{{ _self.addQuery({page: '__page__'}) }}" data-replacer="__page__" data-max="{{ pager.nbPages }}" type="text" value="{{ pager.currentPage }}"/>/{{ pager.nbPages }}</span></li>
            {% endif %}

            {% if dots == 'left' or dots == 'both' %}
                <li><a href="?{{ _self.addQuery({page: 1}) }}">&laquo;&laquo;</a></li>
            {% endif %}

            {% if pager.currentPage == 1 %}
                <li class="disabled"><a href="#">&laquo;</a></li>
            {% else %}
                <li><a href="?{{ _self.addQuery({page: pager.currentPage - 1}) }}">&laquo;</a></li>
            {% endif %}

            {% if dots == 'left' or dots == 'both' %}
                <li class="disabled"><a href="#">...</a></li>
            {% endif %}

            {% for page in min..max %}
                {% if page >= 1 and page <= pager.nbPages %}
                    {% if page == pager.currentPage %}
                        <li class="active">
                            <a>{{ page }}</a>
                        </li>
                    {% else %}
                        <li>
                            <a href="?{{ _self.addQuery({page: page}) }}">{{ page }}</a>
                        </li>
                    {% endif %}
                {% endif %}
            {% endfor %}

            {% if dots == 'right' or dots == 'both' %}
                <li class="disabled"><a href="#">...</a></li>
            {% endif %}

            {% if pager.currentPage == pager.nbPages %}
                <li class="disabled"><a href="#">&raquo;</a></li>
            {% else %}
                <li><a href="?{{ _self.addQuery({page: pager.currentPage + 1}) }}">&raquo;</a></li>
            {% endif %}

            {% if dots == 'right' or dots == 'both' %}
                <li><a href="?{{ _self.addQuery({page: pager.nbPages}) }}">&raquo;&raquo;</a></li>
            {% endif %}
        </ul>
    </div>
{% endmacro %}

{% macro paginationChoices(currentItemPerPage, pagination_values, nbResults) %}

    <button data-toggle="dropdown" class="btn btn-primary btn-sm dropdown-toggle" type="button"><i class="pumicon pumicon-ellipsis"></i> {{ currentItemPerPage }} {{ "macro.paginationchoices.items_per_page"|trans({}, 'pum') }} <span class="caret"></span></button>

    {% set show = false %}
    {% for itemPerPage in pagination_values %}
        {% if nbResults > itemPerPage %}
            {% set show = true %}
        {% endif %}
    {% endfor %}

    {% if show %}
        <ul role="menu" class="dropdown-menu">
            {% for itemPerPage in pagination_values %}
                {% if show %}
                    <li class="{{ currentItemPerPage == itemPerPage ? 'disabled' : '' }}"><a class="pagination-changer" data-value="{{ itemPerPage }}" href="?{{ _self.addQuery({per_page: itemPerPage, page: null}) }}">{{ itemPerPage }} {{ "macro.paginationchoices.items_per_page"|trans({}, 'pum') }}</a></li>

                    {% if nbResults < itemPerPage %}
                        {% set show = false %}
                    {% endif %}
                {% endif %}
            {% endfor %}
        </ul>
    {% endif %}
{% endmacro %}

{# Sort #}
{% macro sort(column, field, currentSort = null, currentSortOrder = null) %}
    {% set sortClassList = { 'asc': 'headerSortUp', 'desc': 'headerSortDown'} %}
    {% set otherSortOrder = currentSortOrder == 'asc' and currentSort == column ? 'desc' : 'asc' %}

    {% if currentSort and currentSort == column %}
        {% set sortClass = sortClassList[currentSortOrder|default('asc')] %}
    {% endif %}

    <a href="?{{ app.request.query.all|merge({sort: column, order: otherSortOrder})|url_encode }}" class="{{ sortClass|default('') }}">
        {{ column|pum_ucfirst }}
    </a>
{% endmacro %}

{# TableView #}
{% macro viewChoices(views, beam, object_definition, tableView) %}
    {% set defaultViewName = 'Default' %}
    {% set currentView = tableView.name %}

    <button data-toggle="dropdown" class="btn btn-inverse btn-sm dropdown-toggle" type="button">
        <i class="pumicon pumicon-layout6"></i>&nbsp;
            {% if currentView != defaultViewName %}
                {{ currentView|pum_ucfirst }}
            {% else %}
                {{ "macro.table_viewchoices.view_change"|trans({}, 'pum') }}
            {% endif %}
        <span class="caret"></span>
    </button>
    <ul role="menu" class="dropdown-menu">
        <li role="presentation" class="dropdown-header">{{ "macro.table_viewchoices.views_list"|trans({}, 'pum') }}</li>
        {% for view in views %}
            {% if view.name == currentView %}
                {% set elClass = 'disabled' %}
                {% set elHref  = '#' %}
                {% set elViewCheck = ' <i class="pumicon pumicon-checkmark"></i>' %}
                {% set elTooltip = ' data-toggle="tooltip" title="' ~ "macro.table_viewchoices.view_current_tooltip"|trans({}, 'pum') ~ '" data-placement="left"' %}
            {% else %}
                {% set elClass = '' %}
                {% set elHref  = '?' ~ {view: view.name}|url_encode %}
                {% set elViewCheck = '' %}
                {% set elTooltip = '' %}
            {% endif %}

            <li class="{{ elClass }}">
                <a class="view-changer" data-value="{{ view.name }}" href="{{ elHref }}"{{ elTooltip|raw }}>{{ view.name|pum_ucfirst }}{{ elViewCheck|raw }}</a>
            </li>
        {% endfor %}

        {% if is_granted('ROLE_PA_VIEW_EDIT') and currentView != defaultViewName %}
            <li role="presentation" class="divider"></li>
            <li role="presentation" class="dropdown-header">{{ "macro.table_viewchoices.view_current"|trans({}, 'pum') }}</li>
            <li role="presentation">
                <a href="{{ path('pa_tableview_edit', {beamName: beam.name, name: object_definition.name, tableViewName: currentView}) }}"><i class="pumicon pumicon-pencil"></i> {{ "macro.table_viewchoices.view_edit"|trans({}, 'pum') }}</a>
            </li>
            <li role="presentation">
                <a data-cancel="{{ "macro.table_viewchoices.view_delete_modal_btn_cancel"|trans({}, 'pum') }}" data-confirm="{{ "macro.table_viewchoices.view_delete_modal_btn_confirm"|trans({}, 'pum') }}" data-text='{{ "macro.table_viewchoices.view_delete_modal_content"|trans({'%name%': currentView}, "pum") }}' href="{{ path('pa_tableview_delete', {beamName: beam.name, name: object_definition.name, tableViewName: currentView}) }}"><i class="pumicon pumicon-minus5"></i> {{ "macro.table_viewchoices.view_delete"|trans({}, 'pum') }}</a>
            </li>
        {% endif %}

        {% if is_granted('ROLE_PA_VIEW_EDIT') %}
            <li role="presentation" class="divider"></li>
            <li role="presentation">
                <a href="{{ path('pa_tableview_create', {beamName: beam.name, name: object_definition.name}) }}"><i class="pumicon pumicon-plus2"></i> {{ "macro.table_viewchoices.view_create"|trans({}, 'pum') }}</a>
            </li>
            <!-- <li><a class="view-create" href="#">Create a new view</a></li> -->
        {% endif %}
    </ul>
{% endmacro %}

{# ObjectView #}
{% macro objectViewChoices(views, beam, object_definition, object) %}
    {% set defaultViewName = 'Default' %}
    {% if object_definition.defaultObjectView is not null %}
        {% set defaultView = object_definition.defaultObjectView.name %}
    {% else %}
        {% set defaultView = defaultViewName %}
    {% endif %}
    {% set currentView = app.request.query.get('view')|default(defaultView) %}

    <button data-toggle="dropdown" class="btn btn-inverse btn-sm dropdown-toggle" type="button">
        <i class="pumicon pumicon-layout6"></i>&nbsp;
            {% if currentView != defaultView %}
                {{ currentView|pum_ucfirst }}
            {% else %}
                {{ "macro.object_viewchoices.view_change"|trans({}, 'pum') }}
            {% endif %}
        <span class="caret"></span>
    </button>
    <ul role="menu" class="dropdown-menu">
        <li role="presentation" class="dropdown-header">{{ "macro.object_viewchoices.views_list"|trans({}, 'pum') }}</li>
        {% for view in views %}
            {% if view.name == currentView %}
                {% set elClass = 'disabled' %}
                {% set elHref  = '#' %}
                {% set elViewCheck = ' <i class="pumicon pumicon-checkmark"></i>' %}
                {% set elTooltip = ' data-toggle="tooltip" title="' ~ "macro.object_viewchoices.view_current_tooltip"|trans({}, 'pum') ~ '" data-placement="left"' %}
            {% else %}
                {% set elClass = '' %}
                {% set elHref  = '?' ~ {view: view.name}|url_encode %}
                {% set elViewCheck = '' %}
                {% set elTooltip = '' %}
            {% endif %}

            <li class="{{ elClass }}">
                <a class="view-changer" data-value="{{ view.name }}" href="{{ elHref }}"{{ elTooltip|raw }}>{{ view.name|pum_ucfirst }}{{ elViewCheck|raw }}</a>
            </li>
        {% endfor %}

        {% if is_granted('ROLE_PA_VIEW_EDIT') and currentView != defaultViewName %}
            <li role="presentation" class="divider"></li>
            <li role="presentation" class="dropdown-header">{{ "macro.object_viewchoices.view_current"|trans({}, 'pum') }}</li>
            <li role="presentation">
                <a href="{{ path('pa_objectview_edit', {beamName: beam.name, name: object_definition.name, id: object.id, viewName: currentView}) }}"><i class="pumicon pumicon-pencil"></i> {{ "macro.object_viewchoices.view_edit"|trans({}, 'pum') }}</a>
            </li>
            <li role="presentation">
                <a data-cancel="{{ "macro.object_viewchoices.view_delete_modal_btn_cancel"|trans({}, 'pum') }}" data-confirm="{{ "macro.object_viewchoices.view_delete_modal_btn_confirm"|trans({}, 'pum') }}" data-text='{{ "macro.object_viewchoices.view_delete_modal_content"|trans({'%name%': currentView}, "pum") }}' href="{{ path('pa_objectview_delete', {beamName: beam.name, name: object_definition.name, id: object.id, viewName: currentView}) }}"><i class="pumicon pumicon-minus5"></i> {{ "macro.object_viewchoices.view_delete"|trans({}, 'pum') }}</a>
            </li>
        {% endif %}

        {% if is_granted('ROLE_PA_VIEW_EDIT') %}
            <li role="presentation" class="divider"></li>
            <li role="presentation">
                <a href="{{ path('pa_objectview_create', {beamName: beam.name, name: object_definition.name, id: object.id}) }}"><i class="pumicon pumicon-plus2"></i> {{ "macro.object_viewchoices.view_create"|trans({}, 'pum') }}</a>
            </li>
            <!-- <li><a class="view-create" href="#">Create a new view</a></li> -->
        {% endif %}
    </ul>
{% endmacro %}

{# FormView #}
{% macro formViewChoices(views, beam, object_definition, object) %}
    {% set defaultViewName = 'Default' %}
    {% if object_definition.defaultFormView is not null %}
        {% set defaultView = object_definition.defaultFormView.name %}
    {% else %}
        {% set defaultView = defaultViewName %}
    {% endif %}
    {% set currentView = app.request.query.get('view')|default(defaultView) %}

    {% if object is not null %}
        {% set object_id = object.id %}
    {% else %}
        {% set object_id = 0 %}
    {% endif %}

    <button data-toggle="dropdown" class="btn btn-inverse btn-sm dropdown-toggle" type="button">
        <i class="pumicon pumicon-layout6"></i>&nbsp;
            {% if currentView != defaultView %}
                {{ currentView|pum_ucfirst }}
            {% else %}
                {{ "macro.form_viewchoices.view_change"|trans({}, 'pum') }}
            {% endif %}
        <span class="caret"></span>
    </button>
    <ul role="menu" class="dropdown-menu">
        <li role="presentation" class="dropdown-header">{{ "macro.form_viewchoices.views_list"|trans({}, 'pum') }}</li>
        {% for view in views %}
            {% if view.name == currentView %}
                {% set elClass = 'disabled' %}
                {% set elHref  = '#' %}
                {% set elViewCheck = ' <i class="pumicon pumicon-checkmark"></i>' %}
                {% set elTooltip = ' data-toggle="tooltip" title="' ~ "macro.form_viewchoices.view_current_tooltip"|trans({}, 'pum') ~ '" data-placement="left"' %}
            {% else %}
                {% set elClass = '' %}
                {% set elHref  = '?' ~ {view: view.name}|url_encode %}
                {% set elViewCheck = '' %}
                {% set elTooltip = '' %}
            {% endif %}

            <li class="{{ elClass }}">
                <a class="view-changer" data-value="{{ view.name }}" href="{{ elHref }}"{{ elTooltip|raw }}>{{ view.name|pum_ucfirst }}{{ elViewCheck|raw }}</a>
            </li>
        {% endfor %}

        {% if is_granted('ROLE_PA_VIEW_EDIT') and currentView != defaultViewName %}
            <li role="presentation" class="divider"></li>
            <li role="presentation" class="dropdown-header">{{ "macro.form_viewchoices.view_current"|trans({}, 'pum') }}</li>
            <li role="presentation">
                <a href="{{ path('pa_formview_edit', {beamName: beam.name, name: object_definition.name, id: object_id, viewName: currentView}) }}"><i class="pumicon pumicon-pencil"></i> {{ "macro.form_viewchoices.view_edit"|trans({}, 'pum') }}</a>
            </li>
            <li role="presentation">
                <a data-cancel="{{ "macro.form_viewchoices.view_delete_modal_btn_cancel"|trans({}, 'pum') }}" data-confirm="{{ "macro.form_viewchoices.view_delete_modal_btn_confirm"|trans({}, 'pum') }}" data-text='{{ "macro.form_viewchoices.view_delete_modal_content"|trans({'%name%': currentView}, "pum") }}' href="{{ path('pa_formview_delete', {beamName: beam.name, name: object_definition.name, id: object_id, viewName: currentView}) }}"><i class="pumicon pumicon-minus5"></i> {{ "macro.form_viewchoices.view_delete"|trans({}, 'pum') }}</a>
            </li>
        {% endif %}

        {% if is_granted('ROLE_PA_VIEW_EDIT') %}
            <li role="presentation" class="divider"></li>
            <li role="presentation">
                <a href="{{ path('pa_formview_create', {beamName: beam.name, name: object_definition.name, id: object_id}) }}"><i class="pumicon pumicon-plus2"></i> {{ "macro.form_viewchoices.view_create"|trans({}, 'pum') }}</a>
            </li>
        {% endif %}
    </ul>
{% endmacro %}

{# Confirmation message #}
{#
    TODO:
    - Group Confirmations in a single alert
    - Display Error color code on each item
#}

{% macro alertMessages() %}
    {% set formMessages = {
        danger: app.session.flashbag.get('message_error'),
        warning: app.session.flashbag.get('message_warning'),
        success: app.session.flashbag.get('message_success')
    } %}

    {% for typeMessage,listMessages in formMessages %}
        {% if listMessages|length > 0 %}
            <div class="alert alert-dismissable alert-{{ typeMessage }}">
                <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                <ul>
                    {% for singleMessage in listMessages %}
                        <li>{{ singleMessage }}</li>
                    {% endfor %}
                </ul>
            </div>
        {% endif %}
    {% endfor %}
{% endmacro %}

{# Query merge and normalize sort #}
{% macro addQuery(data) %}
{% spaceless %}
    {{ app.request.query.all|merge(data)|sort|url_encode }}
{% endspaceless %}
{% endmacro %}


{# Form label translation, thanks to http://www.elao.com/ #}
{% macro form_get_translate_key(form, suffix='label') %}
{% spaceless %}
    {% set v = form.vars.unique_block_prefix|lower|split('_') %}
    {% set p = v[1] %}
    {% set v = v|slice(2) %}

    {% if p is empty %}
        {% set p = 'pum' %}
    {% endif %}

    {% set final_label = [p, 'form']|merge(v) %}

    {% set newv = [] %}

    {% for k in final_label %}
        {% if k is not empty %}
            {% set newv = newv|merge([k]) %}
        {% endif %}
    {% endfor %}

    {{ newv|join('.')|lower ~ '.' ~ suffix }}
{% endspaceless %}
{% endmacro %}
